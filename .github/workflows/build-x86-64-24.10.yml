name: build-x86-64-immortalwrt-24.10.0

on:
  workflow_dispatch:
    inputs:
      profile:
        description: '请输入要编译固件大小 单位(MB)'
        required: true
        default: '2048'
      include_docker:
        description: |
          是否编译 Docker 插件
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      enable_pppoe:
        description: "是否配置PPPoE拨号信息?"
        required: true
        default: 'no'
        type: choice
        options:
        - 'yes'
        - 'no'
      pppoe_account:
        description: "宽带账号 (若启用PPPoE)"
        required: false
      pppoe_password:
        description: "宽带密码 (若启用PPPoE)"
        required: false

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Directory Structure
        run: |
          mkdir -p ${{ github.workspace }}/x86-64/{scripts,24.10}
          mkdir -p ${{ github.workspace }}/files/etc/uci-defaults

      - name: Generate Required Files
        run: |
          # 生成基础编译脚本
          cat > ${{ github.workspace }}/x86-64/24.10/build.sh << EOF
          #!/bin/bash
          echo "Starting ImmortalWrt build process..."
          make -j$(nproc) || make -j1 V=s
          EOF

          # 生成默认配置文件
          cat > ${{ github.workspace }}/x86-64/imm.config << EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_PACKAGE_luci-app-nikki=y
          CONFIG_PACKAGE_luci-i18n-nikki-zh-cn=y
          EOF

          # 生成自动挂载脚本
          cat > ${{ github.workspace }}/x86-64/scripts/auto-mount.sh << EOF
          #!/bin/bash
          echo "Auto mount scripts placeholder"
          EOF

      - name: Set Executable Permissions
        run: |
          chmod +x ${{ github.workspace }}/x86-64/24.10/build.sh
          chmod +x ${{ github.workspace }}/x86-64/scripts/auto-mount.sh

      - name: Generate Feeds Config
        run: |
          cat > feeds.conf.default << EOF
          src-git packages https://github.com/immortalwrt/packages.git;openwrt-24.10
          src-git luci https://github.com/immortalwrt/luci.git;openwrt-24.10
          src-git routing https://github.com/openwrt/routing.git;openwrt-24.10
          src-git nikki https://github.com/nikkinikki-org/OpenWrt-nikki.git;main
          EOF

      - name: Validate PPPoE Inputs
        run: |
          if [[ "${{ github.event.inputs.enable_pppoe }}" == "yes" ]]; then
            if [[ -z "${{ github.event.inputs.pppoe_account }}" || -z "${{ github.event.inputs.pppoe_password }}" ]]; then
              echo "Error: PPPoE account and password must be provided when PPPoE is enabled!"
              exit 1
            fi
          fi

      - name: Build ImmortalWrt
        run: |
          profiles="${{ github.event.inputs.profile }}"
          include_docker="${{ github.event.inputs.include_docker }}"
          
          docker run --rm -i \
            --user root \
            -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
            -v "${{ github.workspace }}/files:/home/build/immortalwrt/files" \
            -v "${{ github.workspace }}/x86-64/imm.config:/home/build/immortalwrt/.config" \
            -v "${{ github.workspace }}/x86-64/24.10/build.sh:/home/build/immortalwrt/build.sh" \
            -v "${{ github.workspace }}/x86-64/scripts:/home/build/immortalwrt/scripts" \
            -v "${{ github.workspace }}/feeds.conf.default:/home/build/immortalwrt/feeds.conf.default" \
            -e PROFILE=$profiles \
            -e INCLUDE_DOCKER=$include_docker \
            -e ENABLE_PPPOE=${{ github.event.inputs.enable_pppoe }} \
            -e PPPOE_ACCOUNT=${{ github.event.inputs.pppoe_account }} \
            -e PPPOE_PASSWORD=${{ github.event.inputs.pppoe_password }} \
            immortalwrt/imagebuilder:x86-64-openwrt-24.10.0 /bin/bash -c "
              # 初始化环境
              cd /home/build/immortalwrt
              echo '当前工作目录: $(pwd)'
              ls -al

              # 更新源并安装组件
              ./scripts/feeds update -a
              ./scripts/feeds install -a

              # 准备编译环境
              make defconfig
              make download -j$(nproc)

              # 编译nikki插件
              echo '开始编译nikki插件...'
              make package/luci-app-nikki/compile V=s

              # 执行主构建
              echo '开始主构建流程...'
              ./build.sh
            "

      - name: Generate Firmware SHA-256
        run: |
          cp ${{ github.workspace }}/bin/targets/x86/64/*squashfs-combined-efi.img.gz ${{ github.workspace }}
          for file in *squashfs-combined-efi.img.gz; do
            sha256sum "$file" > "$file.sha256"
            sha256sum -c "$file.sha256"
          done

      - name: Create Build Info
        run: |
          echo "# Build Report" > ${{ github.workspace }}/info.md
          echo "## Build Parameters" >> ${{ github.workspace }}/info.md
          echo "- 固件大小: ${{ github.event.inputs.profile }}MB" >> ${{ github.workspace }}/info.md
          echo "- 包含Docker: ${{ github.event.inputs.include_docker }}" >> ${{ github.workspace }}/info.md
          echo "- PPPoE拨号: ${{ github.event.inputs.enable_pppoe }}" >> ${{ github.workspace }}/info.md
          echo "## 包含插件" >> ${{ github.workspace }}/info.md
          echo "- luci-app-nikki ([源码仓库](https://github.com/nikkinikki-org/OpenWrt-nikki))" >> ${{ github.workspace }}/info.md

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: Autobuild-x86-64
          body_path: ${{ github.workspace }}/info.md
          files: |
            ${{ github.workspace }}/*squashfs-combined-efi.img.gz
            ${{ github.workspace }}/*.sha256
          token: ${{ secrets.GITHUB_TOKEN }}